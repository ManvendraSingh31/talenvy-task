# Title: Titanic Survival Prediction - Classification Model
 # 1. Imports
 import pandas as pd
 import numpy as np
 import seaborn as sns
 import matplotlib.pyplot as plt
 from sklearn.model_selection import train_test_split
 from sklearn.preprocessing import StandardScaler, LabelEncoder
 from sklearn.ensemble import RandomForestClassifier
 from sklearn.metrics import classification_report, confusion_matrix, accuracy_score
 # 2. Load Dataset
 df = sns.load_dataset("titanic")
 # 3. Basic EDA
 print(df.head())
 print(df.info())
 print(df.describe())
 # 4. Data Cleaning & Feature Engineering
 df = df[['survived', 'pclass', 'sex', 'age', 'sibsp', 'parch', 'fare', 'embarked']]
 df.dropna(inplace=True)
 # Encode categorical variables
 df['sex'] = LabelEncoder().fit_transform(df['sex'])
 df['embarked'] = LabelEncoder().fit_transform(df['embarked'])
 # 5. Feature Selection
 corr = df.corr()
 plt.figure(figsize=(8, 6))
 sns.heatmap(corr, annot=True, cmap="coolwarm")
 plt.title("Feature Correlation Matrix")
 plt.show()
 # Define features and target
 X = df.drop("survived", axis=1)
 y = df["survived"]
 # 6. Train-Test Split
 X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_sta
 # 7. Feature Scaling
 scaler = StandardScaler()
 X_train = scaler.fit_transform(X_train)
 X_test = scaler.transform(X_test)
 # 8. Model Training
 model = RandomForestClassifier(n_estimators=100, random_state=42)
 model.fit(X_train, y_train)
 # 9. Evaluation
 y_pred = model.predict(X_test)
print("Classification Report:\n", classification_report(y_test, y_pred))
 print("Confusion Matrix:\n", confusion_matrix(y_test, y_pred))
 print("Accuracy Score:", accuracy_score(y_test, y_pred))
 # 10. Feature Importance
 importances = model.feature_importances_
 features = X.columns
 feat_imp = pd.Series(importances, index=features).sort_values(ascending=False)
 plt.figure(figsize=(8, 6))
 sns.barplot(x=feat_imp, y=feat_imp.index)
 plt.title("Feature Importances")
 plt.show()
